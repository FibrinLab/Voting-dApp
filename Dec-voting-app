//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VotingdApp {

    address public coordinator;

    struct voter {
        uint vote;      //vote index
        bool voted;     //confirms that a voter has voted
        uint weight;    //access to vote
    }

    struct poll {         //identifiers for each poll
        bytes32 name;           //the name of each poll
        uint voteCount;         //number of accumulated votes for a poll
    }
    
    poll [] public polls;       //an array of polls containing the details of each poll

    /*map each voter with associated attributes to an address.
    Address is the key, voter is the value*/
    mapping (address => voter) public voters;

    address coordinator = msg.sender;
    voters [coordinator].weight = 1; //add 1 to coordinator weight

    //add poll names to the contract before deployment
    constructor (bytes32 [] memory pollNames) {
        for (uint i = 0; i < pollNames.length; i++) {       //looping through all poll names
        //adding each poll with its attributes to the array of polls
            polls.push (poll({      //.push is a method that pushes each name into the array
                name: pollNames[i],
                voteCount: 0,
            }));
        }
    }

}
